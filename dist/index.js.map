{
  "version": 3,
  "sources": ["../lib/polyval_a.js", "../lib/polyval_b.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number-float64-base-to-float32' );\n\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.0;\n\t}\n\treturn float64ToFloat32(1.0 + float64ToFloat32(x * float64ToFloat32(3.2977135181427 + float64ToFloat32(x * float64ToFloat32(4.25697135925293 + float64ToFloat32(x * float64ToFloat32(2.711498498916626 + float64ToFloat32(x * float64ToFloat32(0.8796913027763367 + float64ToFloat32(x * float64ToFloat32(0.13384763896465302 + float64ToFloat32(x * float64ToFloat32(0.007315890397876501 + float64ToFloat32(x * 0.00004651285780710168)))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number-float64-base-to-float32' );\n\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.0;\n\t}\n\treturn float64ToFloat32(1.0 + float64ToFloat32(x * float64ToFloat32(3.5477135181427 + float64ToFloat32(x * float64ToFloat32(5.0327887535095215 + float64ToFloat32(x * float64ToFloat32(3.638005256652832 + float64ToFloat32(x * float64ToFloat32(1.4117259979248047 + float64ToFloat32(x * float64ToFloat32(0.28297486901283264 + float64ToFloat32(x * float64ToFloat32(0.025404376909136772 + float64ToFloat32(x * 0.0006909904768690467)))))))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright 1985, 1987, 1989, 2000 by Stephen L. Moshier\n*\n* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.\n*\n* Stephen L. Moshier\n* moshier@na-net.ornl.gov\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnanf = require( '@stdlib/math-base-assert-is-nanf' );\nvar lnf = require( '@stdlib/math-base-special-lnf' );\nvar f32 = require( '@stdlib/number-float64-base-to-float32' );\nvar polyvalA = require( './polyval_a.js' );\nvar polyvalB = require( './polyval_b.js' );\n\n\n// VARIABLES //\n\nvar PI2O6 = f32( 1.64493406684822643647 ); // \u03C0^2 / 6\nvar ZERO = f32( 0.0 );\nvar HALF = f32( 0.5 );\nvar ONE = f32( 1.0 );\n\n\n// MAIN //\n\n/**\n* Evaluates Spence's function (the dilogarithm) for a single-precision floating-point number.\n*\n* ## Method\n*\n* -   A rational approximation gives the integral in the interval (0.5, 1.5).\n* -   Transformation formulas for \\\\( \\tfrac{1}{x} \\\\) and \\\\( 1 - x \\\\) are employed outside the basic expansion range.\n*\n* ## Notes\n*\n* -   Relative error:\n*\n*     | arithmetic | domain      | # trials | peak    | rms     |\n*     |:----------:|:-----------:|:--------:|:-------:|:-------:|\n*     | IEEE       | 0,4         | 30000    | 4.4e-7  | 6.3e-8  |\n*\n* @param {NonNegativeNumber} x - input value\n* @returns {number} function value\n*\n* @example\n* var v = spencef( 3.0 );\n* // returns ~-1.437\n*\n* @example\n* var v = spencef( 0.0 );\n* // returns ~1.645\n*\n* @example\n* var v = spencef( -9.0 );\n* // returns NaN\n*\n* @example\n* var v = spencef( NaN );\n* // returns NaN\n*/\nfunction spencef( x ) {\n\tvar flg;\n\tvar w;\n\tvar y;\n\tvar z;\n\n\tx = f32( x );\n\tif ( isnanf( x ) || x < 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( x === 1.0 ) {\n\t\treturn ZERO;\n\t}\n\tif ( x === 0.0 ) {\n\t\treturn PI2O6;\n\t}\n\tflg = 0;\n\tif ( x > 2.0 ) {\n\t\tx = f32( ONE / x );\n\t\tflg |= 2;\n\t}\n\tif ( x > 1.5 ) {\n\t\tw = f32( f32( ONE / x ) - ONE );\n\t\tflg |= 2;\n\t} else if ( x < 0.5 ) {\n\t\tw = f32( -x );\n\t\tflg |= 1;\n\t} else {\n\t\tw = f32( x - ONE );\n\t}\n\ty = f32( -w * f32( polyvalA( w ) / polyvalB( w ) ) );\n\tif ( flg & 1 ) {\n\t\ty = f32( f32( PI2O6 - f32( lnf( x )*lnf( ONE-x ) ) ) - y );\n\t}\n\tif ( flg & 2 ) {\n\t\tz = lnf( x );\n\t\ty = f32( -f32( f32( HALF * f32( z*z ) ) + y ) );\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = spencef;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate Spence's function (the dilogarithm) for a single-precision floating-point number.\n*\n* @module @stdlib/math-base-special-spencef\n*\n* @example\n* var spencef = require( '@stdlib/math-base-special-spencef' );\n*\n* var v = spencef( 3.0 );\n* // returns ~-1.437\n*\n* v = spencef( 0.0 );\n* // returns ~1.645\n*\n* v = spencef( -9.0 );\n* // returns NaN\n*\n* v = spencef( NaN );\n* // returns NaN\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAuBA,IAAIC,EAAmB,QAAS,wCAAyC,EAkBzE,SAASC,EAAUC,EAAI,CACtB,OAAKA,IAAM,EACH,EAEDF,EAAiB,EAAMA,EAAiBE,EAAIF,EAAiB,gBAAkBA,EAAiBE,EAAIF,EAAiB,iBAAmBA,EAAiBE,EAAIF,EAAiB,kBAAoBA,EAAiBE,EAAIF,EAAiB,kBAAqBA,EAAiBE,EAAIF,EAAiB,mBAAsBA,EAAiBE,EAAIF,EAAiB,oBAAuBA,EAAiBE,EAAI,oBAAsB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACtb,CAKAH,EAAO,QAAUE,ICnDjB,IAAAE,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAuBA,IAAIC,EAAmB,QAAS,wCAAyC,EAkBzE,SAASC,EAAUC,EAAI,CACtB,OAAKA,IAAM,EACH,EAEDF,EAAiB,EAAMA,EAAiBE,EAAIF,EAAiB,gBAAkBA,EAAiBE,EAAIF,EAAiB,mBAAqBA,EAAiBE,EAAIF,EAAiB,kBAAoBA,EAAiBE,EAAIF,EAAiB,mBAAqBA,EAAiBE,EAAIF,EAAiB,mBAAsBA,EAAiBE,EAAIF,EAAiB,oBAAuBA,EAAiBE,EAAI,oBAAqB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACvb,CAKAH,EAAO,QAAUE,ICnDjB,IAAAE,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAoCA,IAAIC,EAAS,QAAS,kCAAmC,EACrDC,EAAM,QAAS,+BAAgC,EAC/CC,EAAM,QAAS,wCAAyC,EACxDC,EAAW,IACXC,EAAW,IAKXC,EAAQH,EAAK,kBAAuB,EACpCI,EAAOJ,EAAK,CAAI,EAChBK,EAAOL,EAAK,EAAI,EAChBM,EAAMN,EAAK,CAAI,EAwCnB,SAASO,EAASC,EAAI,CACrB,IAAIC,EACAC,EACAC,EACAC,EAGJ,OADAJ,EAAIR,EAAKQ,CAAE,EACNV,EAAQU,CAAE,GAAKA,EAAI,EAChB,IAEHA,IAAM,EACHJ,EAEHI,IAAM,EACHL,GAERM,EAAM,EACDD,EAAI,IACRA,EAAIR,EAAKM,EAAME,CAAE,EACjBC,GAAO,GAEHD,EAAI,KACRE,EAAIV,EAAKA,EAAKM,EAAME,CAAE,EAAIF,CAAI,EAC9BG,GAAO,GACID,EAAI,IACfE,EAAIV,EAAK,CAACQ,CAAE,EACZC,GAAO,GAEPC,EAAIV,EAAKQ,EAAIF,CAAI,EAElBK,EAAIX,EAAK,CAACU,EAAIV,EAAKC,EAAUS,CAAE,EAAIR,EAAUQ,CAAE,CAAE,CAAE,EAC9CD,EAAM,IACVE,EAAIX,EAAKA,EAAKG,EAAQH,EAAKD,EAAKS,CAAE,EAAET,EAAKO,EAAIE,CAAE,CAAE,CAAE,EAAIG,CAAE,GAErDF,EAAM,IACVG,EAAIb,EAAKS,CAAE,EACXG,EAAIX,EAAK,CAACA,EAAKA,EAAKK,EAAOL,EAAKY,EAAEA,CAAE,CAAE,EAAID,CAAE,CAAE,GAExCA,EACR,CAKAd,EAAO,QAAUU,ICzFjB,IAAIM,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_polyval_a", "__commonJSMin", "exports", "module", "float64ToFloat32", "evalpoly", "x", "require_polyval_b", "__commonJSMin", "exports", "module", "float64ToFloat32", "evalpoly", "x", "require_main", "__commonJSMin", "exports", "module", "isnanf", "lnf", "f32", "polyvalA", "polyvalB", "PI2O6", "ZERO", "HALF", "ONE", "spencef", "x", "flg", "w", "y", "z", "main"]
}
